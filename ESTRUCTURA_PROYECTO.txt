GUÍA DETALLADA: ESTRUCTURA DEL PROYECTO GIMNASIO PHP
================================================

1. ARCHIVO INDEX.PHP - PUNTO DE ENTRADA
-------------------------------------
1.1 Propósito Principal:
- Punto único de entrada para todas las peticiones
- Configura el entorno de ejecución
- Enruta las peticiones al controlador y acción correspondientes

1.2 Flujo de Ejecución:
1. Incluye archivos de configuración global
2. Registra el autoloader para cargar clases automáticamente
3. Captura la URL solicitada
4. Instancia el FrontController
5. Maneja excepciones globales

1.3 Código Clave:
```php
// 1. Cargar configuraciones
require_once 'config/global.php';

// 2. Registrar autoloader
spl_autoload_register(function($className) {
    // Lógica para cargar clases automáticamente
});

// 3. Manejo de excepciones global
try {
    // 4. Iniciar la aplicación
    FrontController::main();
} catch (Exception $e) {
    // Manejo de errores
}
```

2. ESTRUCTURA DE DIRECTORIOS PRINCIPALES
-------------------------------------

2.1 /config/
- `database.php`: Parámetros de conexión a la base de datos
- `global.php`: Configuraciones generales de la aplicación

2.2 /core/ (Núcleo del Framework)
- `FrontController.php`: Enruta las peticiones a los controladores
- `DBManager.php`: Gestiona la conexión a la base de datos
- `BaseModel.php`: Clase base para los modelos
- `BaseController.php`: Clase base para los controladores
- `View.php`: Motor de plantillas básico

2.3 /controladores/
- `IndexController.php`: Controlador principal
- `UsuarioController.php`: Manejo de usuarios
- `ActividadController.php`: Gestión de actividades
- `HorarioController.php`: Administración de horarios

2.4 /modelos/
- `UsuarioModel.php`: Lógica de negocio de usuarios
- `ActividadModel.php`: Operaciones con actividades
- `HorarioModel.php`: Gestión de horarios
- `AsistenciaModel.php`: Control de asistencias

2.5 /vistas/
- /layouts/
  - `header.php`: Cabecera común
  - `footer.php`: Pie de página común
  - `menu.php`: Menú de navegación
- /index/
  - `index.php`: Página de inicio
- /usuario/
  - `perfil.php`: Perfil de usuario
  - `login.php`: Formulario de inicio de sesión
  - `registro.php`: Formulario de registro

2.6 /assets/
- /css/
  - `estilos.css`: Estilos principales
  - `responsive.css`: Estilos responsivos
- /js/
  - `main.js`: Funcionalidades JavaScript
- /img/
  - /usuarios/: Fotos de perfil
  - /actividades/: Imágenes de actividades

2.7 /uploads/
- Directorio para archivos subidos por los usuarios
- Permisos: 755 (drwxr-xr-x)

3. FLUJO DE UNA PETICIÓN TÍPICA
-----------------------------
1. El usuario accede a una URL (ej: /usuario/perfil/1)
2. El servidor web (Apache) redirige a index.php
3. FrontController procesa la URL y determina:
   - Controlador: UsuarioController
   - Acción: perfil
   - Parámetros: [1]
4. Se ejecuta UsuarioController->perfil(1)
5. El controlador interactúa con el modelo
6. El modelo usa DBManager para consultar la BD
7. El controlador pasa los datos a la vista
8. La vista se renderiza con el layout correspondiente

4. ARCHIVOS DE CONFIGURACIÓN IMPORTANTES
--------------------------------------
4.1 .htaccess (Reescritura de URLs)
```apache
RewriteEngine On
RewriteBase /GimnasioPHP/
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php?url=$1 [QSA,L]
```

4.2 composer.json (Si se usa Composer)
```json
{
    "autoload": {
        "psr-4": {
            "App\\": "src/"
        }
    }
}
```

5. BUENAS PRÁCTICAS DE ESTRUCTURA
-------------------------------
5.1 Convenciones de Nombrado:
- Controladores: PascalCase con sufijo 'Controller'
- Modelos: PascalCase con sufijo 'Model'
- Vistas: minúsculas con guiones-bajos
- Archivos de Clase: Mismo nombre que la clase

5.2 Organización de Código:
- Separación clara entre capas (MVC)
- Lógica de negocio en modelos
- Lógica de presentación en vistas
- Controladores delgados

6. MIGRACIONES Y SEMILLAS (Si se implementan)
-------------------------------------------
6.1 /database/
  - /migrations/: Archivos de migración
  - /seeds/: Datos de prueba
  - schema.sql: Esquema completo de la base de datos

7. PRUEBAS
---------
7.1 /tests/
  - /Unit/: Pruebas unitarias
  - /Feature/: Pruebas de características
  - TestCase.php: Clase base para pruebas

8. DOCUMENTACIÓN
--------------
8.1 /docs/
  - api.md: Documentación de la API
  - guia-desarrollo.md: Guía para desarrolladores
  - estructura-bd.md: Esquema de la base de datos
